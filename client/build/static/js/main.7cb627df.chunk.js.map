{"version":3,"sources":["SignIn.js","App.js","serviceWorker.js","index.js"],"names":["SignIn","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isSignUp","_this2","classes","react_default","a","createElement","className","main","CssBaseline_default","Paper_default","paper","Avatar_default","avatar","LockOutlined_default","Typography_default","component","variant","form","FormControl_default","margin","required","fullWidth","InputLabel_default","htmlFor","Input_default","id","name","autoFocus","type","FormControlLabel_default","control","Checkbox_default","value","color","label","Button_default","submit","onClick","setState","autoComplete","React","Component","withStyles","theme","defineProperty","width","display","marginLeft","spacing","unit","marginRight","breakpoints","up","marginTop","flexDirection","alignItems","padding","concat","backgroundColor","palette","secondary","App","src_SignIn","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cb627df.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\n\r\nconst styles = theme => ({\r\n  main: {\r\n    width: 'auto',\r\n    display: 'block', // Fix IE 11 issue.\r\n    marginLeft: theme.spacing.unit * 3,\r\n    marginRight: theme.spacing.unit * 3,\r\n    [theme.breakpoints.up(400 + theme.spacing.unit * 3 * 2)]: {\r\n      width: 400,\r\n      marginLeft: 'auto',\r\n      marginRight: 'auto',\r\n    },\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing.unit * 8,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: `${theme.spacing.unit * 2}px ${theme.spacing.unit * 3}px ${theme.spacing.unit * 3}px`,\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing.unit,\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing.unit,\r\n  },\r\n  submit: {\r\n    marginTop: theme.spacing.unit * 3,\r\n  },\r\n});\r\n\r\n\r\nclass SignIn extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            isSignUp : false\r\n        }\r\n    }\r\n    render(){\r\n        const { classes } = this.props\r\n        if (!this.state.isSignUp){\r\n        return(\r\n            <main className={classes.main}>\r\n            <CssBaseline />\r\n            <Paper className={classes.paper}>\r\n              <Avatar className={classes.avatar}>\r\n                <LockOutlinedIcon />\r\n              </Avatar>\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                Sign in\r\n              </Typography>\r\n              <form className={classes.form}>\r\n                <FormControl margin=\"normal\" required fullWidth>\r\n                  <InputLabel htmlFor=\"email\">Username</InputLabel>\r\n                  <Input id=\"email\" name=\"email\" autoComplete=\"email\" autoFocus />\r\n                </FormControl>\r\n                <FormControl margin=\"normal\" required fullWidth>\r\n                  <InputLabel htmlFor=\"password\">Password</InputLabel>\r\n                  <Input name=\"password\" type=\"password\" id=\"password\" autoComplete=\"current-password\" />\r\n                </FormControl>\r\n                <FormControlLabel\r\n                  control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                  label=\"Remember me\"\r\n                />\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                >\r\n                  Sign In\r\n                </Button>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                  onClick = {() => this.setState({isSignUp : !this.state.isSignUp})}\r\n                >\r\n                  Sign Up\r\n                </Button>\r\n              </form>\r\n            </Paper>\r\n          </main>\r\n        )\r\n        }else{\r\n            return(\r\n                <main className={classes.main}>\r\n                <CssBaseline />\r\n                <Paper className={classes.paper}>\r\n                  <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                  </Avatar>\r\n                  <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign Up\r\n                  </Typography>\r\n                  <form className={classes.form}>\r\n                    <FormControl margin=\"normal\" required fullWidth>\r\n                      <InputLabel htmlFor=\"email\">Username</InputLabel>\r\n                      <Input id=\"email\" name=\"email\"  autoFocus />\r\n                    </FormControl>\r\n                    <FormControl margin=\"normal\" required fullWidth>\r\n                      <InputLabel htmlFor=\"password\">Password</InputLabel>\r\n                      <Input name=\"password\" type=\"password\" id=\"password\"  />\r\n                    </FormControl>\r\n                    <FormControl margin=\"normal\" required fullWidth>\r\n                      <InputLabel htmlFor=\"name\">Name</InputLabel>\r\n                      <Input name=\"name\" type=\"text\" id=\"text\" />\r\n                    </FormControl>\r\n                    <FormControlLabel\r\n                      control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                      label=\"Remember me\"\r\n                    />\r\n                    <Button\r\n                      type=\"submit\"\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.submit}\r\n                    >\r\n                      Sign Up\r\n                    </Button>\r\n                    <Button\r\n                      type=\"submit\"\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.submit}\r\n                      onClick = {() => this.setState({isSignUp : !this.state.isSignUp})}\r\n                    >\r\n                      Sign In\r\n                    </Button>\r\n                  </form>\r\n                </Paper>\r\n              </main>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// function SignIn(props) {\r\n//   const { classes } = props;\r\n\r\n//   return (\r\n//     <main className={classes.main}>\r\n//       <CssBaseline />\r\n//       <Paper className={classes.paper}>\r\n//         <Avatar className={classes.avatar}>\r\n//           <LockOutlinedIcon />\r\n//         </Avatar>\r\n//         <Typography component=\"h1\" variant=\"h5\">\r\n//           Sign in\r\n//         </Typography>\r\n//         <form className={classes.form}>\r\n//           <FormControl margin=\"normal\" required fullWidth>\r\n//             <InputLabel htmlFor=\"email\">Email Address</InputLabel>\r\n//             <Input id=\"email\" name=\"email\" autoComplete=\"email\" autoFocus />\r\n//           </FormControl>\r\n//           <FormControl margin=\"normal\" required fullWidth>\r\n//             <InputLabel htmlFor=\"password\">Password</InputLabel>\r\n//             <Input name=\"password\" type=\"password\" id=\"password\" autoComplete=\"current-password\" />\r\n//           </FormControl>\r\n//           <FormControlLabel\r\n//             control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n//             label=\"Remember me\"\r\n//           />\r\n//           <Button\r\n//             type=\"submit\"\r\n//             fullWidth\r\n//             variant=\"contained\"\r\n//             color=\"primary\"\r\n//             className={classes.submit}\r\n//           >\r\n//             Sign in\r\n//           </Button>\r\n//         </form>\r\n//       </Paper>\r\n//     </main>\r\n//   );\r\n// }\r\n\r\nSignIn.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(SignIn);","import React, { Component } from 'react';\nimport SignIn from './SignIn'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      // <div className=\"App\">\n      //   <header className=\"App-header\">\n      //     {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n      //     <p>\n      //       Edit <code>src/App.js</code> and save to reload.\n      //     </p>\n      //     <a\n      //       className=\"App-link\"\n      //       href=\"https://reactjs.org\"\n      //       target=\"_blank\"\n      //       rel=\"noopener noreferrer\"\n      //     >\n      //       Learn React\n      //     </a>\n      //   </header>\n      // </div>\n      <SignIn></SignIn>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}